name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta  # Consider pinning to specific SHA when stable
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # iOS/Swift specific allowed tools for TeamGen
          allowed_tools: "Bash(xcodebuild),Bash(swiftlint),Bash(swiftformat),Bash(./scripts/build.sh),Bash(./scripts/test.sh)"
          
          # TeamGen-specific custom instructions
          custom_instructions: |
            You are reviewing iOS Swift code for TeamGen, a team management app.
            
            Key guidelines:
            - Follow Clean Architecture principles (Domain → Core → Features → Shared)
            - Use @Observable ViewModels (not @ObservableObject)
            - Ensure SwiftData integration follows repository patterns
            - All new code should have comprehensive tests
            - Follow Apple's Swift API Design Guidelines
            - Use SwiftUI best practices with proper state management
            - Check for proper dependency injection patterns
            - Ensure accessibility (VoiceOver, Dynamic Type) compliance
            - Follow the existing design system patterns
            - Use async/await patterns for data operations
            
            Focus areas:
            - Performance optimization
            - Memory management
            - Error handling
            - Unit test coverage
            - Code maintainability
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

