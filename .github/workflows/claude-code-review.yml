name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Run on iOS/Swift specific file changes
    paths:
      - "TeamGen/**/*.swift"
      - "TeamGenTests/**/*.swift"
      - "TeamGenUITests/**/*.swift"
      - "TeamGen.xcodeproj/**"
      - ".github/workflows/**"
      - "scripts/**"
      - "*.md"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta  # Consider pinning to specific SHA when stable
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # iOS/Swift specific automated review for TeamGen
          direct_prompt: |
            Review this TeamGen iOS Swift pull request with focus on:
            
            **Architecture & Design:**
            - Clean Architecture adherence (Domain → Core → Features → Shared)
            - Proper dependency injection and protocol usage
            - @Observable ViewModel patterns (not @ObservableObject)
            - SwiftData repository pattern compliance
            
            **Code Quality:**
            - Swift API Design Guidelines compliance
            - Proper error handling and async/await usage
            - Memory management and performance optimization
            - SwiftUI best practices and state management
            
            **Testing & Quality:**
            - Unit test coverage for new functionality
            - Integration with existing test infrastructure
            - SwiftLint and SwiftFormat compliance
            
            **iOS Specific:**
            - Accessibility (VoiceOver, Dynamic Type) support
            - Design system consistency
            - iOS 18.4+ compatibility
            - Performance on iPhone devices
            
            **Security:**
            - No hardcoded secrets or sensitive data
            - Proper data validation and error handling
            - Secure SwiftData operations
            
            Provide specific, actionable feedback with code examples where helpful.
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # iOS/Swift specific tools for automated testing and linting
          allowed_tools: "Bash(./scripts/build.sh ci),Bash(swiftlint lint),Bash(swiftformat --lint .),Bash(xcodebuild test)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

