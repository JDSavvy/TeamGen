name: Claude-GitHub Integration

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - create-issues
          - update-progress  
          - generate-roadmap
          - sync-todos
      priority:
        description: 'Issue priority'
        required: false
        type: choice
        default: 'medium'
        options:
          - low
          - medium
          - high
          - critical

  schedule:
    # Run weekly progress updates
    - cron: '0 9 * * 1'  # Monday 9 AM UTC

  issues:
    types: [opened, closed, labeled]

jobs:
  claude-integration:
    name: Claude Integration
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
      - name: Create Infrastructure Issues
        if: github.event.inputs.action == 'create-issues'
        run: |
          # Test Implementation Issue
          gh issue create \
            --title "üß™ Complete Test Implementation - Priority: ${{ github.event.inputs.priority }}" \
            --body "$(cat <<'EOF'
          ## Summary
          Complete the test implementation to match actual API implementations and achieve 90%+ code coverage.

          ## Tasks
          - [ ] Fix PlayerEntityTests to match actual PlayerEntity API
          - [ ] Fix TeamEntityTests to match actual TeamEntity API  
          - [ ] Update repository tests for SwiftDataPlayerRepository
          - [ ] Fix use case tests for actual APIs
          - [ ] Implement comprehensive UI tests for critical flows
          - [ ] Achieve 90%+ test coverage for Domain/Core layers

          ## Acceptance Criteria
          - All tests pass without compilation errors
          - Test coverage ‚â• 90% for Domain and Core layers
          - UI tests cover critical user journeys
          - Tests follow TDD best practices

          ## Priority
          ${{ github.event.inputs.priority }} - Foundation for confident development

          ü§ñ Generated by Claude-GitHub Integration
          EOF
          )" \
            --label "testing,infrastructure,${{ github.event.inputs.priority }}-priority" \
            --assignee "${{ github.actor }}"
            
      - name: Update Progress Report
        if: github.event.inputs.action == 'update-progress'
        run: |
          # Generate progress report
          echo "# üìä TeamGen Progress Report - $(date)" > progress_report.md
          echo "" >> progress_report.md
          echo "## üéØ Current Status" >> progress_report.md
          echo "" >> progress_report.md
          
          # Count issues by status
          OPEN_ISSUES=$(gh issue list --state open --json number | jq length)
          CLOSED_ISSUES=$(gh issue list --state closed --json number | jq length)
          
          echo "- **Open Issues**: $OPEN_ISSUES" >> progress_report.md
          echo "- **Closed Issues**: $CLOSED_ISSUES" >> progress_report.md
          echo "" >> progress_report.md
          
          # Recent activity
          echo "## üìà Recent Activity" >> progress_report.md
          gh issue list --state all --limit 5 --json number,title,state,updatedAt \
            --jq '.[] | "- [\(.state | ascii_upcase)] #\(.number) \(.title)"' >> progress_report.md
          
          echo "" >> progress_report.md
          echo "ü§ñ Generated by Claude-GitHub Integration" >> progress_report.md
          
          # Create issue with progress report
          gh issue create \
            --title "üìä Weekly Progress Report - $(date +%Y-%m-%d)" \
            --body "$(cat progress_report.md)" \
            --label "report,automated" \
            --assignee "${{ github.actor }}"
            
      - name: Generate Development Roadmap
        if: github.event.inputs.action == 'generate-roadmap'
        run: |
          # Create comprehensive roadmap
          gh issue create \
            --title "üó∫Ô∏è TeamGen Development Roadmap" \
            --body "$(cat <<'EOF'
          ## üéØ Development Roadmap

          ### Phase 1: Foundation (Weeks 1-2)
          - [ ] Complete test implementation
          - [ ] Fix all compilation errors
          - [ ] Achieve 90%+ test coverage
          - [ ] Verify CI/CD pipeline

          ### Phase 2: Core Features (Weeks 3-4)
          - [ ] Complete settings management
          - [ ] Implement team generation algorithms
          - [ ] Add player skill balancing
          - [ ] Implement export functionality

          ### Phase 3: Optimization (Weeks 5-6)
          - [ ] Performance profiling and optimization
          - [ ] Memory usage optimization
          - [ ] UI/UX polish
          - [ ] Accessibility implementation

          ### Phase 4: Advanced Features (Weeks 7-8)
          - [ ] iCloud sync implementation
          - [ ] Advanced analytics
          - [ ] Widget support
          - [ ] Premium features

          ## üöÄ Success Metrics
          - **App Launch Time**: < 1 second
          - **Test Coverage**: ‚â• 90%
          - **Build Time**: < 2 minutes
          - **User Satisfaction**: High ratings

          ## üìÖ Milestones
          - **v1.0 MVP**: Core functionality complete
          - **v1.1 Enhancement**: Performance and features
          - **v1.2 Premium**: Advanced capabilities

          ü§ñ Generated by Claude-GitHub Integration
          EOF
          )" \
            --label "roadmap,planning" \
            --assignee "${{ github.actor }}"
            
      - name: Sync TODOs
        if: github.event.inputs.action == 'sync-todos'
        run: |
          # Extract TODOs from code and create issues
          echo "Scanning for TODOs in codebase..."
          
          # Find TODO comments
          grep -r "// TODO\|// FIXME\|// HACK" . \
            --include="*.swift" \
            --exclude-dir=DerivedData \
            --exclude-dir=.git \
            > todos.txt || true
            
          if [ -s todos.txt ]; then
            echo "Found TODOs - creating tracking issue..."
            gh issue create \
              --title "üìù Code TODOs Tracking - $(date +%Y-%m-%d)" \
              --body "$(cat <<'EOF'
          ## üîç TODOs Found in Codebase

          $(cat todos.txt | head -20)

          ## Action Required
          - Review each TODO item
          - Create specific issues for major items
          - Fix or document minor items
          - Remove completed TODOs

          ü§ñ Generated by Claude-GitHub Integration
          EOF
          )" \
              --label "todos,maintenance" \
              --assignee "${{ github.actor }}"
          else
            echo "No TODOs found in codebase - excellent! üéâ"
          fi
          
      - name: Weekly Automated Update
        if: github.event.schedule
        run: |
          # Weekly automated progress update
          ./scripts/claude-github-integration.sh status
          
          # Check for stale issues
          gh issue list --state open --json number,title,updatedAt \
            --jq '.[] | select(.updatedAt < (now - 7*24*3600) | strftime("%Y-%m-%dT%H:%M:%SZ")) | "\(.number) \(.title)"' \
            > stale_issues.txt || true
            
          if [ -s stale_issues.txt ]; then
            gh issue create \
              --title "‚ö†Ô∏è Stale Issues Alert - $(date +%Y-%m-%d)" \
              --body "$(cat <<'EOF'
          ## üö® Stale Issues Detected

          The following issues haven't been updated in over a week:

          $(cat stale_issues.txt)

          ## Recommended Actions
          - Review each issue for current relevance
          - Update status or close if completed
          - Add progress comments
          - Reassign if needed

          ü§ñ Generated by Claude-GitHub Integration
          EOF
          )" \
              --label "maintenance,stale-issues" \
              --assignee "${{ github.actor }}"
          fi