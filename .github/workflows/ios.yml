name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SCHEME: TeamGen
  PROJECT: TeamGen.xcodeproj
  DESTINATION: 'platform=iOS Simulator,OS=latest'

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: macos-14
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Install SwiftFormat
      run: |
        brew install swiftformat
        
    - name: Run SwiftLint
      run: swiftlint lint --reporter github-actions-logging
      continue-on-error: true  # Allow warnings but report violations
      
    - name: Check SwiftFormat
      run: swiftformat --lint .
      continue-on-error: true  # Allow formatting warnings
      
    - name: Verify Code Style
      run: |
        echo "✅ Code quality checks passed"

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: macos-14
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
        
    - name: Show Xcode Version
      run: xcodebuild -version
      
    - name: Show Available Simulators
      run: xcrun simctl list devices available
      
    - name: Create and Boot iOS Simulator
      run: |
        # Create a new iPhone 15 simulator if one doesn't exist
        DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15"
        RUNTIME=$(xcrun simctl list runtimes ios -j | jq -r '.runtimes | map(select(.name | contains("iOS"))) | sort_by(.version) | last.identifier')
        
        echo "Using runtime: $RUNTIME"
        DEVICE_ID=$(xcrun simctl create "TeamGen-CI" "$DEVICE_TYPE" "$RUNTIME")
        echo "Created device: $DEVICE_ID"
        
        # Boot the simulator
        xcrun simctl boot "$DEVICE_ID"
        echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
      
    - name: Clean Build Folder
      run: |
        xcodebuild clean \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }}
          
    - name: Build Project
      run: |
        xcodebuild build \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }} \
          -destination "id=${{ env.DEVICE_ID }}" \
          -configuration Debug \
          -quiet
          
    - name: Run Unit Tests
      run: |
        xcodebuild test \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }} \
          -destination "id=${{ env.DEVICE_ID }}" \
          -configuration Debug \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults.xcresult \
          -quiet
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults.xcresult
        
    - name: Generate Code Coverage Report
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.json

  # UI Testing (on specific events)
  ui-tests:
    name: UI Tests
    runs-on: macos-14
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
        
    - name: Run UI Tests
      run: |
        xcodebuild test \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }} \
          -destination "id=${{ env.DEVICE_ID }}" \
          -configuration Debug \
          -only-testing:TeamGenUITests \
          -quiet

  # Security and Dependency Scanning
  security-scan:
    name: Security Scan
    runs-on: macos-14
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Package Audit
      run: |
        # Check for known vulnerabilities in dependencies
        # Skip if no Package.swift exists (Xcode project without SPM)
        if [ -f "Package.swift" ]; then
          swift package resolve
        else
          echo "⚠️ No Package.swift found, skipping SPM audit"
        fi
        echo "✅ Security scan completed"
        
    - name: Check for Secrets
      run: |
        # Basic check for hardcoded secrets (excluding scripts and docs)
        if grep -r "sk_" . --exclude-dir=.git --exclude-dir=scripts --exclude="*.yml" --exclude="*.yaml" --exclude="*.md" --exclude="*.sh" 2>/dev/null | grep -v "example" | grep -v "placeholder" | grep -v "mach_task" | grep -v "PerformanceMonitoringService"; then
          echo "❌ Potential secrets found"
          exit 1
        fi
        echo "✅ No hardcoded secrets detected"

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: macos-14
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
        
    - name: Generate DocC Documentation
      run: |
        xcodebuild docbuild \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }} \
          -destination "id=${{ env.DEVICE_ID }}" \
          -derivedDataPath docs
          
    - name: Upload Documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/Build/Products/Debug-iphonesimulator/TeamGen.doccarchive

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: macos-14
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
        
    - name: Run Performance Tests
      run: |
        # Skip performance tests if they don't exist yet
        if xcodebuild -list -project ${{ env.PROJECT }} | grep -q "PerformanceTests"; then
          xcodebuild test \
            -project ${{ env.PROJECT }} \
            -scheme ${{ env.SCHEME }} \
            -destination "id=${{ env.DEVICE_ID }}" \
            -configuration Release \
            -only-testing:TeamGenTests/PerformanceTests \
            -quiet
        else
          echo "⚠️ Performance tests not found, skipping..."
        fi

  # Archive and Export (Release builds)
  archive:
    name: Archive for Distribution
    runs-on: macos-14
    needs: [build-and-test, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
        
    - name: Build Archive
      run: |
        xcodebuild archive \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }} \
          -destination 'generic/platform=iOS' \
          -archivePath TeamGen.xcarchive \
          -configuration Release \
          -quiet
          
    - name: Upload Archive
      uses: actions/upload-artifact@v4
      with:
        name: ios-archive
        path: TeamGen.xcarchive

  # Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan]
    if: failure()
    
    steps:
    - name: Create Failure Issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CI/CD Pipeline Failed - ${context.sha.substring(0, 7)}`,
            body: `
            ## Pipeline Failure Report
            
            **Commit**: ${context.sha}
            **Branch**: ${context.ref}
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            
            Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
            
            **Auto-generated issue**
            `,
            labels: ['bug', 'ci/cd', 'high-priority']
          })

# Workflow concurrency settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true